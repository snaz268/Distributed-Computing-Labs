Lab 8: Total Event Ordering using Lamport Logical Clock
Introduction
This lab introduces the concept of Lamport Logical Clock and its implementation.
Objectives
To understand the Lamport Logical clock.
Tools/Software Requirement
MS Visual Studio 2013
Description
In distributed transactions, we need to guarantee that concurrent updates on a replicated database are seen in the same order everywhere. This requires a totally‐ordered multicast – Update 1: add $100 to an account (initial value = $1000) – Update 2: add 1% interest to account – In absence of proper synchronization: replica 1 = $1111, replica 2 = $1110. Lamport’s logical clocks can be used to implement totally‐ordered multicast in a completely distributed fashion.
Lab Tasks
Let’s assume there are two processes communicating with each other. Each maintaining its own logical clock, multicast events at random time interval. Write code that allow the execution of events in a total order fashion as discussed in class. Use UDP socket for this communication, build your own data packet and ack structure. Each process will be acting as client and server at the same time. Use UDP socket to solve the above mentioned problem. 
You can use dictionary to maintain the IP, PORT for each process, use this dictionary to send packet to every entry inside dictionary.
Note: The output on each process console should only display the events ready for execution i.e. after acquiring all the acks
At Process P1
P1: Executing event <logical_clock_value, Src_Process=x>
P1: Executing event <logical_clock_value, Src_Process=x>
Similarly, at proces P2
P2: Executing event<logical_clock_value, Src_Process=x>
P2: Executing event<logical_clock_value, Src_Process=x>
